version: '3'
services:
  redis: 
    image: redis:alpine
    container_name: sc-redis
    restart: always
    volumes:
      - type: volume
        source: redis-data
        target: /data
    environment:
      - REDIS_PASSWORD=123456
    networks:
      - sc-net
    ports:
      - 6379:6379
    env_file: .env

  rabbitmq:
    image: rabbitmq:alpine
    container_name: sc-rabbitmq
    restart: always
    volumes:
      - type: volume
        source: mq-data
        target: /var/lib/rabbitmq/mnesia
    networks:
      - sc-net
    ports:
      - 5672:5672
    env_file: .env

  mysql:
    image: mysql:5.7
    container_name: sc-mysql
    restart: always
    networks:
      - sc-net
    ports:
      - 3306:3306
    volumes:
      - type: volume
        source: mysql-data
        target: /var/lib/mysql
#        不确定他的作用 =>  flag to disable copying of data from a container when a volume is created
#        volume:
#          nocopy: true
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: root123

  mysql-init:
    image: mysql:5.7
    command: /init-db.sh
    networks:
      - sc-net
    volumes:
      - ../auth/db:/sql/auth
      - ../gateway/gateway-admin/src/main/db:/sql/gateway
      - ../sysadmin/db:/sql/sysadmin
      - ./init-db.sh:/init-db.sh
    environment:
      MYSQL_ROOT_PASSWORD: root123

# 使用同一个网络
# notice: 这个只适合单机环境下运行。 多机器部署情况下需要改动很多配置(数据库连接，注册中心地址等等等等)
networks:
  sc-net:
    external: false

#  改用volume来持久化有状态服务
#  volume 在 docker 中被推荐为首选方式，它与 bind mount 相比，有以下优点：
#  1. 与 bind mount 相比，volume 更容易备份或迁移。
#  2. 可以使用 Docker CLI 命令或 Docker API 来管理。
#  3. volume 在 Linux 和 Windows 容器上都能工作。
#  4. volume 可以在多个容器之间更安全的共享。
#  5. volume 驱动程序允许你在远程主机或云上提供存储、加密或其他功能。
#  6. 新 volume 的内容可以由容器预填充。
volumes:
  mysql-data:
  redis-data:
  mq-data:
